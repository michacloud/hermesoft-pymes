{#
* Copyright (C) 2019-2021 Carlos Garcia Gomez <carlos@facturascripts.com>
* Author Daniel Fernández Giménez <hola@danielfg.es>
#}

{% extends "Master/MenuBgTemplate.html.twig" %}

{% set pageData = fsc.getPageData() %}

{% block body %}
    <div class="container-fluid d-print-none">
        {{ parent() }}
        <div class="row">
            <div class="col-md-7">
                <div class="btn-group">
                    <a class="btn btn-sm btn-secondary" href="{{ fsc.url() }}" title="{{ i18n.trans('refresh') }}">
                        <i class="fas fa-redo" aria-hidden="true"></i>
                    </a>
                    <a class="btn btn-sm btn-secondary" href="{{ fsc.url() }}?defaultPage=TRUE"
                       title="{{ i18n.trans('mark-as-homepage') }}">
                        <i class="far fa-bookmark" aria-hidden="true"></i>
                    </a>
                </div>
            </div>

            <div class="col-md-5 text-right">
                <h1 class="h4 mb-0 d-none d-md-inline-block">
                    {% set title = i18n.trans(fsc.getPageData()['title']) | capitalize %}
                    {{ title }}<i class="{{ fsc.getPageData()['icon'] }} ml-3" aria-hidden="true"></i>
                </h1>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="card border-primary shadow mt-4">
                    <div class="card-header bg-primary text-white d-flex flex-row">
                        <select class="form-control" id="selectYear">
                            {{ fsc.loadYears()|raw }}
                        </select>
                        <div class="ml-2 mt-2" load-after="true" id="yearSpinner"></div>
                    </div>
                    <div id="summaryData"></div>
                </div>

                <div class="card border-success shadow mt-4">
                    <h5 class="card-header bg-success text-white cursor-pointer d-flex" id="showSales">
                        {{ i18n.trans('sales') }}
                        <div class="ml-2" load-after="true" id="salesSpinner"></div>
                        <i class="fa fa-plus ml-auto"></i>
                    </h5>
                    <div id="salesReport" class="collapse">
                        <div class="card-body p-0"></div>
                    </div>
                </div>

                <div class="card border-danger shadow mt-4">
                    <h5 class="card-header bg-danger text-white cursor-pointer d-flex" id="showPurchases">
                        {{ i18n.trans('expenses') }}
                        <div class="ml-2" load-after="true" id="purchasesSpinner"></div>
                        <i class="fa fa-plus ml-auto"></i>
                    </h5>
                    <div id="purchasesReport" class="collapse">
                        <div class="card-body p-0"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col-12">
                <div class="card shadow mt-4">
                    <div class="card-body h5">
                        <i class="fas fa-chart-line"></i> {{ i18n.trans('annual-result') }}
                    </div>
                    <div class="canva">
                        <canvas id="chartsResume"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="card shadow mt-4">
                    <div class="card-body h5">
                        <i class="fas fa-chart-pie"></i> {{ i18n.trans('sales-per-family') }}
                    </div>
                    <div class="canva">
                        <canvas id="chartsFamilies"></canvas>
                    </div>
                    <div class="table-responsive" id="chartsListFamilies">
                        <table class="table mb-0 table-sm">
                            <thead>
                            <th></th>
                            <th>{{ i18n.trans('family') }}</th>
                            <th class="porc">%</th>
                            <th class="total">{{ i18n.trans('total') }}</th>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="card shadow mt-4">
                    <div class="card-body h5">
                        <i class="fas fa-chart-pie"></i> {{ i18n.trans('sales-per-serie') }}
                    </div>
                    <div class="canva">
                        <canvas id="chartsSeries"></canvas>
                    </div>
                    <div class="table-responsive" id="chartsListSeries">
                        <table class="table mb-0 table-sm">
                            <thead>
                            <th></th>
                            <th>{{ i18n.trans('serie') }}</th>
                            <th class="porc">%</th>
                            <th class="total">{{ i18n.trans('total') }}</th>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="card shadow mt-4">
                    <div class="card-body h5">
                        <i class="fas fa-chart-pie"></i> {{ i18n.trans('sales-per-paymethod') }}
                    </div>
                    <div class="canva">
                        <canvas id="chartsPagos"></canvas>
                    </div>
                    <div class="table-responsive" id="chartsListPagos">
                        <table class="table mb-0 table-sm">
                            <thead>
                            <th></th>
                            <th>{{ i18n.trans('method-payment') }}</th>
                            <th class="porc">%</th>
                            <th class="total">{{ i18n.trans('total') }}</th>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="card shadow mt-4">
                    <div class="card-body h5">
                        <i class="fas fa-chart-pie"></i> {{ i18n.trans('sales-per-agent') }}
                    </div>
                    <div class="canva">
                        <canvas id="chartsAgentes"></canvas>
                    </div>
                    <div class="table-responsive" id="chartsListAgentes">
                        <table class="table mb-0 table-sm">
                            <thead>
                            <th></th>
                            <th>{{ i18n.trans('agent') }}</th>
                            <th class="porc">%</th>
                            <th class="total">{{ i18n.trans('total') }}</th>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block css %}
    {{ parent() }}

    <style>
        .canva {
            height: 300px;
        }

        .card-header .fa {
            transition: .3s transform ease-in-out;
        }

        .card-header .collapsed .fa {
            transform: rotate(90deg);
        }

        #selectYear {
            max-width: 300px;
        }

        table .porc, table .total, table .month {
            white-space: nowrap;
            text-align: right;
        }

        table .title {
            width: 15%;
        }

        table .porc {
            width: 6%;
        }

        .cursor-pointer {
            cursor: pointer;
        }

        table td.hiddenRow {
            padding: 0 !important;
        }

        table td.hiddenRow div {
            background: #e6f0ff;
            border-top: 1px solid #000;
            border-bottom: 1px solid #000;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="{{ asset('node_modules/chart.js/dist/Chart.min.js') }}"></script>
    {% include 'LoadSpinner.html.twig' %}

    <script>
        let accountReport = '';
        let agentesChart;
        let familiesChart;
        let familyReport = '';
        let pagosChart;
        let purchasesReport = false;
        let resumeChart;
        let salesReport = false;
        let seriesChart;

        $(document).ready(function () {
            function initPage() {
                if (salesReport) {
                    $('#showSales').click();
                }

                if (purchasesReport) {
                    $('#showPurchases').click();
                }

                $('#salesReport .card-body').html('');
                $('#purchasesReport .card-body').html('');

                let formData = new FormData();
                formData.append('action', 'load-summary');
                sendForm(formData, $('#yearSpinner'));
            }

            function sendForm(formData, btn = '') {
                if (btn !== '') {
                    animateSpinner(btn, 'add');
                }

                formData.append('codejercicio', $('#selectYear option:selected').val());

                console.log(Object.fromEntries(formData));

                fetch('{{ fsc.url() }}', {
                    method: 'POST',
                    body: formData
                }).then(function (response) {
                    if (response.ok) {
                        if (btn !== '') {
                            animateSpinner(btn, 'remove', true);
                        }
                        return response.json();
                    }
                    if (btn !== '') {
                        animateSpinner(btn, 'remove', false);
                    }
                    return Promise.reject(response);
                }).then(function (data) {
                    console.log(data);

                    if (data.summary && data.summary !== '') {
                        $('#summaryData').html(data.summary);
                        setCharts(data.charts);
                    }

                    if (data.sales && data.sales !== '') {
                        $('#salesReport .card-body').html(data.sales);
                    }

                    if (data.purchases && data.purchases !== '') {
                        $('#purchasesReport .card-body').html(data.purchases);
                    }

                    if (data.family && data.family !== '') {
                        $('#salesReport tr').each(function(){
                            if ($(this).attr('codfamilia') === data.codfamilia) {
                                $(this).next().find('div').html(data.family);
                            }
                        });
                    }

                    if (data.account && data.account !== '') {
                        $('#purchasesReport tr').each(function(){
                            if ($(this).attr('codcuenta') === data.codcuenta) {
                                $(this).next().find('div').html(data.account);
                            }
                        });
                    }

                    if (Array.isArray(data.messages)) {
                        data.messages.forEach(item => alert(item.message));
                    }
                }).catch(function (error) {
                    alert('error');
                    console.warn(error);
                });

                return false;
            }

            function setCharts(charts) {
                $('#chartsListFamilies table tbody').html(charts['families']['table']);
                $('#chartsListSeries table tbody').html(charts['series']['table']);
                $('#chartsListPagos table tbody').html(charts['pagos']['table']);
                $('#chartsListAgentes table tbody').html(charts['agentes']['table']);

                window.chartColors = {
                    red: 'rgb(255, 99, 132)',
                    orange: 'rgb(255, 159, 64)',
                    yellow: 'rgb(255, 205, 86)',
                    green: 'rgb(75, 192, 192)',
                    blue: 'rgb(54, 162, 235)',
                    purple: 'rgb(153, 102, 255)',
                    grey: 'rgb(231,233,237)'
                };
                let dataResume = {
                    labels: [
                        "{{ i18n.trans('january') }}",
                        "{{ i18n.trans('february') }}",
                        "{{ i18n.trans('march') }}",
                        "{{ i18n.trans('april') }}",
                        "{{ i18n.trans('may') }}",
                        "{{ i18n.trans('june') }}",
                        "{{ i18n.trans('july') }}",
                        "{{ i18n.trans('august') }}",
                        "{{ i18n.trans('september') }}",
                        "{{ i18n.trans('october') }}",
                        "{{ i18n.trans('november') }}",
                        "{{ i18n.trans('december') }}"],
                    datasets: [{
                        type: 'line',
                        label: '{{ i18n.trans('sales') }}',
                        borderColor: window.chartColors.green,
                        borderWidth: 2,
                        fill: false,
                        data: charts['totales']['ventas']
                    }, {
                        type: 'line',
                        label: '{{ i18n.trans('expenses') }}',
                        borderColor: window.chartColors.red,
                        borderWidth: 2,
                        fill: false,
                        data: charts['totales']['gastos']
                    }, {
                        type: 'line',
                        label: '{{ i18n.trans('result') }}',
                        borderColor: window.chartColors.blue,
                        borderWidth: 4,
                        fill: false,
                        data: charts['totales']['resultado']
                    }]
                };
                let dataFamilies = {
                    labels: charts['families']['labels'],
                    datasets: [{
                        data: charts['families']['porc'],
                        data2: charts['families']['totales'],
                        backgroundColor: charts['families']['colors'],
                        hoverBackgroundColor: charts['families']['colors']
                    }]
                };
                let dataSeries = {
                    labels: charts['series']['labels'],
                    datasets: [{
                        data: charts['series']['porc'],
                        data2: charts['series']['totales'],
                        backgroundColor: charts['series']['colors'],
                        hoverBackgroundColor: charts['series']['colors']
                    }]
                };
                let dataPagos = {
                    labels: charts['pagos']['labels'],
                    datasets: [{
                        data: charts['pagos']['porc'],
                        data2: charts['pagos']['totales'],
                        backgroundColor: charts['pagos']['colors'],
                        hoverBackgroundColor: charts['pagos']['colors']
                    }]
                };
                let dataAgentes = {
                    labels: charts['agentes']['labels'],
                    datasets: [{
                        data: charts['agentes']['porc'],
                        data2: charts['agentes']['totales'],
                        backgroundColor: charts['agentes']['colors'],
                        hoverBackgroundColor: charts['agentes']['colors']
                    }]
                };

                if (resumeChart != null) {
                    resumeChart.destroy();
                }

                if (familiesChart != null) {
                    familiesChart.destroy();
                }

                if (seriesChart != null) {
                    seriesChart.destroy();
                }

                if (pagosChart != null) {
                    pagosChart.destroy();
                }

                if (agentesChart != null) {
                    agentesChart.destroy();
                }

                let canvaResume = document.getElementById("chartsResume");
                let canvaFamilies = document.getElementById("chartsFamilies");
                let canvaSeries = document.getElementById("chartsSeries");
                let canvaPagos = document.getElementById("chartsPagos");
                let canvaAgentes = document.getElementById("chartsAgentes");

                resumeChart = Chart.Line(canvaResume.getContext("2d"), {
                    data: dataResume,
                    options: {
                        maintainAspectRatio: false,
                        showAllTooltips: false,
                        responsive: true,
                        hoverMode: 'index',
                        stacked: false,
                        title: {
                            display: false,
                            text: '{{ i18n.trans('charts-per-month') }}'
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: true
                        }
                    }
                });

                familiesChart = new Chart(canvaFamilies.getContext("2d"), {
                    type: 'pie',
                    data: dataFamilies,
                    options: {
                        maintainAspectRatio: false,
                        showAllTooltips: false,
                        cutoutPercentage: 40,
                        responsive: true,
                        animation: {
                            animateRotate: true,
                            animateScale: true
                        },
                        legend: {
                            display: false
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: true,
                            callbacks: {
                                label: function (tooltipItem, data) {
                                    let allData = data.datasets[tooltipItem.datasetIndex].data;
                                    let allData2 = data.datasets[tooltipItem.datasetIndex].data2;
                                    let tooltipLabel = data.labels[tooltipItem.index];
                                    let tooltipData = allData[tooltipItem.index];
                                    let tooltipData2 = allData2[tooltipItem.index];
                                    let total = 0;
                                    for (let i in allData) {
                                        total += allData[i];
                                    }
                                    let tooltipPercentage = Math.round((tooltipData / total) * 100);
                                    return tooltipLabel + ': ' + tooltipData2 + ' (' + tooltipPercentage + '%)';
                                }
                            }
                        }
                    }
                });

                seriesChart = new Chart(canvaSeries.getContext("2d"), {
                    type: 'pie',
                    data: dataSeries,
                    options: {
                        maintainAspectRatio: false,
                        showAllTooltips: false,
                        cutoutPercentage: 40,
                        responsive: true,
                        animation: {
                            animateRotate: true,
                            animateScale: true
                        },
                        legend: {
                            display: false
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: true,
                            callbacks: {
                                label: function (tooltipItem, data) {
                                    let allData = data.datasets[tooltipItem.datasetIndex].data;
                                    let allData2 = data.datasets[tooltipItem.datasetIndex].data2;
                                    let tooltipLabel = data.labels[tooltipItem.index];
                                    let tooltipData = allData[tooltipItem.index];
                                    let tooltipData2 = allData2[tooltipItem.index];
                                    let total = 0;
                                    for (let i in allData) {
                                        total += allData[i];
                                    }
                                    let tooltipPercentage = Math.round((tooltipData / total) * 100);
                                    return tooltipLabel + ': ' + tooltipData2 + ' (' + tooltipPercentage + '%)';
                                }
                            }
                        }
                    }
                });

                pagosChart = new Chart(canvaPagos.getContext("2d"), {
                    type: 'pie',
                    data: dataPagos,
                    options: {
                        maintainAspectRatio: false,
                        showAllTooltips: false,
                        cutoutPercentage: 40,
                        responsive: true,
                        animation: {
                            animateRotate: true,
                            animateScale: true
                        },
                        legend: {
                            display: false
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: true,
                            callbacks: {
                                label: function (tooltipItem, data) {
                                    let allData = data.datasets[tooltipItem.datasetIndex].data;
                                    let allData2 = data.datasets[tooltipItem.datasetIndex].data2;
                                    let tooltipLabel = data.labels[tooltipItem.index];
                                    let tooltipData = allData[tooltipItem.index];
                                    let tooltipData2 = allData2[tooltipItem.index];
                                    let total = 0;
                                    for (let i in allData) {
                                        total += allData[i];
                                    }
                                    let tooltipPercentage = Math.round((tooltipData / total) * 100);
                                    return tooltipLabel + ': ' + tooltipData2 + ' (' + tooltipPercentage + '%)';
                                }
                            }
                        }
                    }
                });

                agentesChart = new Chart(canvaAgentes.getContext("2d"), {
                    type: 'pie',
                    data: dataAgentes,
                    options: {
                        maintainAspectRatio: false,
                        showAllTooltips: false,
                        cutoutPercentage: 40,
                        responsive: true,
                        animation: {
                            animateRotate: true,
                            animateScale: true
                        },
                        legend: {
                            display: false
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: true,
                            callbacks: {
                                label: function (tooltipItem, data) {
                                    let allData = data.datasets[tooltipItem.datasetIndex].data;
                                    let allData2 = data.datasets[tooltipItem.datasetIndex].data2;
                                    let tooltipLabel = data.labels[tooltipItem.index];
                                    let tooltipData = allData[tooltipItem.index];
                                    let tooltipData2 = allData2[tooltipItem.index];
                                    let total = 0;
                                    for (let i in allData) {
                                        total += allData[i];
                                    }
                                    let tooltipPercentage = Math.round((tooltipData / total) * 100);
                                    return tooltipLabel + ': ' + tooltipData2 + ' (' + tooltipPercentage + '%)';
                                }
                            }
                        }
                    }
                });
            }

            $(document).on('change', '#selectYear', function () {
                initPage();
            });

            $(document).on('click', '#showSales', function () {
                if (salesReport === false) {
                    $('#showSales i').removeClass('fa-plus').addClass('fa-minus');
                    salesReport = true;
                    let formData = new FormData();
                    formData.append('action', 'load-sales');
                    sendForm(formData, $('#salesSpinner'));
                } else {
                    $('#showSales i').addClass('fa-plus').removeClass('fa-minus');
                    salesReport = false;
                }
                $('#salesReport').collapse('toggle');
            });

            $(document).on('click', '#salesReport tr.ventas', function () {
                if (salesReport) {
                    if (familyReport === $(this).attr('codfamilia')) {
                        $($(this).attr('data-target')).collapse('hide');
                        familyReport = '';
                        return;
                    }

                    familyReport = $(this).attr('codfamilia');

                    $('#salesReport tr.ventas').each(function () {
                        $($(this).attr('data-target')).collapse('hide');
                    });

                    let formData = new FormData();
                    formData.append('action', 'load-family');
                    formData.append('parent_codfamilia', familyReport);
                    sendForm(formData, $(this).find('td:first'));
                    $($(this).attr('data-target')).collapse('toggle');
                }
            });

            $(document).on('click', '#showPurchases', function () {
                if (purchasesReport === false) {
                    $('#showPurchases i').removeClass('fa-plus').addClass('fa-minus');
                    purchasesReport = true;
                    let formData = new FormData();
                    formData.append('action', 'load-purchases');
                    sendForm(formData, $('#purchasesSpinner'));
                } else {
                    $('#showPurchases i').addClass('fa-plus').removeClass('fa-minus');
                    purchasesReport = false;
                }
                $('#purchasesReport').collapse('toggle');
            });

            $(document).on('click', '#purchasesReport tr.gastos', function () {
                if (purchasesReport) {
                    if (accountReport === $(this).attr('codcuenta')) {
                        $($(this).attr('data-target')).collapse('hide');
                        accountReport = '';
                        return;
                    }

                    accountReport = $(this).attr('codcuenta');

                    $('#purchasesReport tr.gastos').each(function () {
                        $($(this).attr('data-target')).collapse('hide');
                    });

                    let formData = new FormData();
                    formData.append('action', 'load-account');
                    formData.append('parent_codcuenta', accountReport);
                    sendForm(formData, $(this).find('td:first'));
                    $($(this).attr('data-target')).collapse('toggle');
                }
            });

            initPage();
        });
    </script>
{% endblock %}
